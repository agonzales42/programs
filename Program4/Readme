
CS 371 Assignment: Junit
========================

This assignment involves using JUnit to perform automated
unit testing on some classes.

JUnit is available at www.junit.org.

Select "Download and Install" and follow the "Plain-old JAR" commands.
You need junit-4.12.jar and hamcrest-core-1.3.jar. Do not grab anything 
related to "Maven". Do NOT put the jarfiles in your CS371 workspace and 
definitely do NOT commit them into the course repository! I do not want 
35 copies of JUnit jarfiles in the repository! Place them elsewhere and 
then set your classpath. There are two scripts that show examples of 
setting your classpath (or you can set it on your Java command line with 
-cp). Learning to use your classpath is part of learning Java.

From the JUnit home page, click on "Getting Started" in the upper right, 
and read the short "JUnit Cookbook" to see a short introduction. The 
Javadoc-generated API documentation is also useful. You can find many 
other resources and tutorials on the web that describe JUnit. As part of
this assignment you must generate the Javadoc files in a subdirectory named
"apidoc" and it must include documentation for all class members, including
private members (you need to figure out how to do these things; it's easy).

If you have set your classpath, you should be able to compile and run the 
example test in the directory: see the file "run-test" to see an example 
of how the Junit tests are run (this can also be done in a Java main, 
which is in the Circle1Test.java code, but is commented out).

Your task for this assignment is to create unit tests which accomplish 
certain goals, mainly ensuring good testing coverage of the classes under 
test, for one particular type of testing.

You have three classes to test: an abstract class Circle and two 
subclasses, Circle1 and Circle2. The requirements for all three are in 
Javadoc-able comments in the Circle class. All three classes may have 
errors; as you encounter errors, you MUST document the error, including
which test found the error, and then you must fix the error. There is also
a "CircleRun" class which demonstrates some example execution, but your 
unit tests using JUnit will exercise an object (or more) of the class(es) 
directly, and will not use the CircleRun class. You do not have to test 
this class, it is there just so that you can run the classes in a 
standalone matter to see what they do.

When creating test cases you should not have "redundant" test cases which 
do not exercise anything new. Having more tests than you need will REDUCE 
your grade, not enhance it! 

You must write a comment header for each test case that succinctly describes 
that test case. Just write a short description -- a long verbose description 
is no good!

This assignment: Black box testing
==================================

Black box testing aims to test the code according to its requirements, 
without being able to look into the code and see how things are implemented.
The code is treated as a "black box" -- in the case of testing an individual 
class, only its public API is considered.

Suggested reading:

textbook, section 8.2 (p410 in particular)
http://en.wikipedia.org/wiki/Black_box_testing
http://en.wikipedia.org/wiki/Equivalence_Partitioning
http://en.wikipedia.org/wiki/Boundary-value_analysis

Use the ideas from equivalence partitioning and boundary value analysis to 
create JUnit test cases which fully test the three classes under black box 
testing. The JUnit test classes must be named "Circle1Test" and 
"Circle2Test". Note that since this is black box testing and both concrete 
classes under test should implement the same requirements, your two test 
classes should be exactly the same except for which class they reference 
(Circle1 and Circle2).

Submitting the assignment
=========================

To submit this assignment, make sure your programs folder contains 
directory named "assignment-junit1" containing the following:

1. Your java source files for Circle1Test and Circle2Test including all the
   test cases you created (they should contain the same exact tests).
2. The possibly updated Java source files for Circle, Circle1, and Circle2.
3. The documentation generated by JavaDoc (as described above; normally it
   is not appropriate to commit auto-generated files into a repository, but
   this assignment is an exception.)
4. Your plain text file that documents any errors you found, which test cases
   found them, and how you fixed them.

Do NOT commit any .class files, nor any libraries.


